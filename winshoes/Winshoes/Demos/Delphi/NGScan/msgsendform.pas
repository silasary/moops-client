unit MsgSendForm;

interface

uses
  Windows, Messages, SysUtils, Classes, Graphics, Controls, Forms, Dialogs,
  StdCtrls, Winshoes, WinshoeMessage, NNTPWinshoe, ComCtrls, FolderList;

type
  TformMsgSend = class(TForm)
    butnCancel: TButton;
    wsMSG: TWinshoeMessage;
    NNTP: TWinshoeNNTP;
    Animate1: TAnimate;
    lablStatus: TLabel;
    procedure butnCancelClick(Sender: TObject);
    procedure FormActivate(Sender: TObject);
    procedure NNTPStatus(Sender: TComponent; const sOut: String);
  private
    FTreeNode: TTreeNode;
    FUserAbort: Boolean;
  protected
    procedure SetHostData(HostData: THostData);
    procedure SendTopTenPrim(NewsItem: TTreeNode);
    procedure SendNewsgroupTopTen(NewsItem: TTreeNode);
    procedure SendHostTopTen(HostItem: TTreeNode);
    procedure SendAllTopTen(RootItem: TTreeNode);
  public
    procedure SetStatusCaption(Value: string);
    property TreeNode: TTreeNode read FTreeNode write FTreeNode;
  end;

implementation

{$R *.DFM}

procedure TformMsgSend.SetHostData(HostData: THostData);
begin
  with NNTP do begin
    Host := HostData.HostName;
    Port := HostData.Port;
    UserID := HostData.UserID;
    Password := HostData.Password;
  end;
  Caption := 'Sending Reports for '+HostData.HostName;
end;

procedure TformMsgSend.SetStatusCaption(Value: string);
begin
  lablStatus.Caption := Value;
  lablStatus.Update;
end;

procedure TformMsgSend.SendTopTenPrim(NewsItem: TTreeNode);
var
  HostData: THostData;
begin
  SetStatusCaption(TNewsgroupData(NewsItem.Data).NewsgroupName);

  if TNewsgroupData(NewsItem.Data).List.Count > 0 then begin
    HostData := THostData(NewsItem.Parent.Data);

    with wsMSG do begin
      Clear;
      From := HostData.FullName;
      ReplyTo := HostData.Email;
      Subject := 'Top 10 Article Posters';
      Organization := HostData.Organization;
      Newsgroups.Text := TNewsgroupData(NewsItem.Data).NewsgroupName;

      Text.Assign(TNewsgroupData(NewsItem.Data).List);
      Text.Add('=========================================================');
      Text.Add('Generated by NGScan.  Freely available (with source code)');
      Text.Add('as part of Winshoes from http://www.pbe.com/winshoes/');
      Text.Add('Best viewed using a fixed font.');
    end;

    NNTP.Send(wsMSG);
  end;
end;

procedure TformMsgSend.SendNewsgroupTopTen(NewsItem: TTreeNode);
begin
  SetHostData(THostData(NewsItem.Parent.Data));

  NNTP.Connect;
  try
    SendTopTenPrim(NewsItem);
  finally
    NNTP.Disconnect;
  end;
end;

procedure TformMsgSend.SendHostTopTen(HostItem: TTreeNode);
var
  NewsItem: TTreeNode;
begin
  SetHostData(THostData(HostItem.Data));

  NNTP.Connect;
  try
    NewsItem := HostItem.GetFirstChild;
    while Assigned(NewsItem) and not FUserAbort do begin
      SendTopTenPrim(NewsItem);
      NewsItem := NewsItem.GetNextChild(NewsItem);
      Application.ProcessMessages;
      if FUserAbort or not NNTP.Connected then
        Break;
    end;
  finally
    NNTP.Disconnect;
  end;
end;

procedure TformMsgSend.SendAllTopTen(RootItem: TTreeNode);
var
  HostItem: TTreeNode;
begin
  HostItem := RootItem.GetFirstChild;
  while Assigned(HostItem) and not FUserAbort do begin
    SendHostTopTen(HostItem);
    HostItem := HostItem.GetNextChild(HostItem);
    Application.ProcessMessages;
    if FUserAbort or not NNTP.Connected then
      Break;
  end;
end;

procedure TformMsgSend.butnCancelClick(Sender: TObject);
begin
  FUserAbort := True;
end;

procedure TformMsgSend.FormActivate(Sender: TObject);
begin
  Refresh;
  Animate1.Active := True;
  if TObject(TreeNode.Data) is TFolderData then
    SendAllTopTen(TreeNode)
  else if TObject(TreeNode.Data) is THostData then
    SendHostTopTen(TreeNode)
  else if TObject(TreeNode.Data) is TNewsgroupData then
    SendNewsgroupTopTen(TreeNode);
end;

procedure TformMsgSend.NNTPStatus(Sender: TComponent; const sOut: String);
begin
  SetStatusCaption(Trim(sOut));
end;

end.
